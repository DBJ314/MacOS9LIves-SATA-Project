\ sil3124 main driver

tokenizer[ hex 1095 3124 010400 ]tokenizer
pci-header
fcode-version2

hex
external
" SIL3124" device-name

" SIL3124,Main" encode-string
" pci1095,3124" encode-string encode+
" compatible" property

" has-fcode" get-my-property if false else 2drop true then constant in-rom?

0 encode-int " progress" property

in-rom? if
	0 0 my-space encode-phys						\ config space
		0 encode-int encode+ 0 encode-int encode+
	0 0 03000010 my-space or encode-phys encode+	\ base reg 0: globals
		0 encode-int encode+ 80 encode-int encode+
	0 0 03000018 my-space or encode-phys encode+	\ base reg 1: slots
		0 encode-int encode+ 8000 encode-int encode+
	0 0 01000020 my-space or encode-phys encode+	\ base reg 2: io
		0 encode-int encode+ 10 encode-int encode+
	0 0 02000030 my-space or encode-phys encode+	\ exp rom: flash
		0 encode-int encode+ 80000 encode-int encode+
	" reg" property
then

1 encode-int " progress" property


fload :hardware-registers.of

2 encode-int " progress" property

0 value chipset.globals
0 value chipset.ports
0 value chipset.io
0 value chipset.flash

0 value open-count

0 value prb-cpu
0 value prb-dev

0 value current-port#
0 value portregs

\ these are 4 entry char arrays that describe status for each of the ports
0 value disk-present
0 value disk-protocols

: parent-map-in	 " map-in"   $call-parent ;
: parent-map-out " map-out"  $call-parent ;



: dma-alloc   " dma-alloc"   $call-parent ; ( size -- virt )
: dma-free    " dma-free"    $call-parent ; ( virt size -- )
: dma-map-in  " dma-map-in"  $call-parent ; ( virt size cacheable? -- devaddr )
: dma-map-out " dma-map-out" $call-parent ; ( virt devaddr size -- )
: dma-sync    " dma-sync"    $call-parent ; ( virt devaddr size )


: config-w!	" config-w!" $call-parent ;
: config-w@ " config-w@" $call-parent ;

3 encode-int " progress" property

: map-self
	" map-self" type cr
	" assigned-addresses" get-my-property
	abort" SIL3124: unable to get assigned-addresses property"
	
	dup 4 5 4 * * <> if 2drop false exit then \ "assigned-addresses must be 4 entries long
	4 0 do
		" map-self: looping" type cr
		decode-phys ( aa.adr aa.len phys.lo phys.med phys.hi )
		dup ff and case \ switch on register number
			10 of 80 parent-map-in to chipset.globals endof
			18 of 8000 parent-map-in to chipset.ports endof
			20 of 10 parent-map-in to chipset.io endof
			30 of 80000 parent-map-in to chipset.flash endof
			
			dup of true abort" SIL3124: unknown assign-addresses base register" endof
		endcase
		decode-int drop decode-int drop
	loop
	2drop
	7 my-space 4 + tuck config-w@ or swap config-w!	\ enable Memory Space, IO Space, and Master Mode
	
;

: unmap-self
	" unmap-self" type cr
	chipset.globals 80 parent-map-out 0 to chipset.globals
	chipset.ports 8000 parent-map-out 0 to chipset.ports
	chipset.io 10 parent-map-out 0 to chipset.io
	chipset.flash 80000 parent-map-out 0 to chipset.flash
	7 not my-space 4 + tuck config-w@ and swap config-w! \ disable Memory Space, IO Space, and Master Mode
;

4 encode-int " progress" property

fload :chipset-utils.of

5 encode-int " progress" property

fload :device-nodes.of

6 encode-int " progress" property

fload :ata-interface.of

7 encode-int " progress" property

: open
	" open" type cr
	open-count 0= if
		" open: full init" type cr
		map-self
		global-init
	then
	open-count 1+ to open-count
	true
;

: close
	" close" type cr
	open-count 1- dup to open-count
	0= if
		" close: full term" type cr
		chipset-reset
		unmap-self
	then
;
	
8 encode-int " progress" property

fcode-end
pci-end